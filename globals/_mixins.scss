// ------------------------------
// Typography
// ------------------------------

// Font size mixin
@mixin font-size($font-size) {
  font-size: $font-size;
  font-size: ($font-size / $base-font-size) * 1rem;
}



// ------------------------------
// Buttons
// ------------------------------

// Button style mixin
@mixin button($button-color) {
  background-color: $button-color;
  box-shadow: 0 $base-spacing-unit/8 shade($button-color, 25%);
  color: white !important;
  text-shadow: 1px 1px shade($button-color, 15%);

  &:hover,
  &:focus {
    background: shade($button-color, 15%);
    color: white;
  }
  &:visited {
    color: white;
  }
}



// ------------------------------
// Cards
// ------------------------------

// @include card($card-color-base, $card-background-tint, $card-box-shadow-tint, $card-heading-shade);

// Example:
/*
  .element {
    @include card($orange, 85%, 75%, 25%);
  }
*/

// Card style mixin
@mixin card($card-color-base, $card-background-tint, $card-box-shadow-tint, $card-heading-shade) {
  background-color: tint($card-color-base, $card-background-tint);
  box-shadow: 0 0.1875em tint($card-color-base, $card-box-shadow-tint);

  .card-heading {
    @include rem('margin-bottom', $half-spacing-unit);
    color: shade($card-color-base, $card-heading-shade);
  }
}



// ------------------------------
// Alerts
// ------------------------------

// Alert style mixin
@mixin alert($alert-color) {
  background-color: tint($alert-color, 50%);
  color: shade($alert-color, 75%);

  a {
    color: shade(saturate($alert-color, 50%), 40%);

    &:hover {
      color: shade(saturate($alert-color, 50%), 65%);
    }
  }
  &[class*="ss-"]:before,
  &[class^="ss-"]:before {
    color: shade(saturate($alert-color, 50%), 20%);
  }
}



// ------------------------------
// Rems Converter
// ------------------------------
// https://github.com/bitmanic/rem

// Example:
/*
  .element {
    @include rem('padding', 10px 0 2px 5px);
  }
*/
$baseline-px: $base-font-size;

@mixin rem($property, $px-values) {

  // Convert the baseline into rems
  $baseline-rem: $baseline-px / 1rem;

  // Print the first line in pixel values
  #{$property}: $px-values;

  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem;
  }
  @else {
    // Create an empty list that we can dump values into
    $rem-values: unquote("");
    @each $value in $px-values {

      // If the value is zero, return 0
      @if $value == 0 {
        $rem-values: append($rem-values, $value);
      }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem); }
      }

    // Return the property and its list of converted values
    #{$property}: $rem-values;
  }
}



// ------------------------------
// Media Queries
// ------------------------------

// Set end points
$palm-end:              $lap-start - 1px;
$lap-end:               $desk-start - 1px;

@mixin media-query($media-query) {

  @if $media-query == palm {
    @media only screen and (max-width:$palm-end) { @content; }
  }
  @if $media-query == lap {
    @media only screen and (min-width:$lap-start) and (max-width:$lap-end) { @content; }
  }
  @if $media-query == lap-and-up {
    @media only screen and (min-width:$lap-start) { @content; }
  }
  @if $media-query == portable {
    @media only screen and (max-width:$lap-end) { @content; }
  }
  @if $media-query == desk {
    @media only screen and (min-width:$desk-start) { @content; }
  }
}



// ------------------------------
// Hide
// ------------------------------

// Mixin to hide content off-screen without resorting to display: none;
@mixin hide {
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  height: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  width: 1px !important;
}